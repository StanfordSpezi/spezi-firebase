//
// This source file is part of the Stanford Biodesign Digital Health Spezi Firebase Remote Notifications open-source project
//
// SPDX-FileCopyrightText: 2025 Stanford University
//
// SPDX-License-Identifier: MIT
//

import { type StructureDefinition } from 'fhir/r4b.js'
import { z, type ZodType } from 'zod'
import { FhirDomainResource } from './domainResourceClass.js'
import {
  addressSchema,
  annotationSchema,
  attachmentSchema,
  backboneElementSchema,
  booleanSchema,
  codeableConceptSchema,
  codingSchema,
  contactDetailSchema,
  contactPointSchema,
  contributorSchema,
  dataRequirementSchema,
  dateTimeSchema,
  decimalSchema,
  domainResourceSchema,
  dosageSchema,
  elementSchema,
  expressionSchema,
  humanNameSchema,
  identifierSchema,
  intSchema,
  moneySchema,
  parameterDefinitionSchema,
  periodSchema,
  quantitySchema,
  rangeSchema,
  ratioSchema,
  referenceSchema,
  relatedArtifactSchema,
  sampledDataSchema,
  signatureSchema,
  stringSchema,
  timingSchema,
  triggerDefinitionSchema,
  unsignedIntSchema,
  uriSchema,
  urlSchema,
  usageContextSchema,
} from '../elements/index.js'
import {
  aggregationModeSchema,
  bindingStrengthSchema,
  constraintSeveritySchema,
  discriminatorTypeSchema,
  extensionContextTypeSchema,
  propertyRepresentationSchema,
  publicationStatusSchema,
  slicingRulesSchema,
  structureDefinitionDerivationSchema,
  structureDefinitionKindSchema,
} from '../valueSets/index.js'

export const untypedStructureDefinitionSchema = z.lazy(() =>
  domainResourceSchema.extend({
    resourceType: z.literal('StructureDefinition').readonly(),
    url: urlSchema,
    _url: elementSchema.optional(),
    identifier: identifierSchema.array().optional(),
    version: stringSchema.optional(),
    _version: elementSchema.optional(),
    name: stringSchema,
    _name: elementSchema.optional(),
    title: stringSchema.optional(),
    _title: elementSchema.optional(),
    status: publicationStatusSchema,
    _status: elementSchema.optional(),
    experimental: booleanSchema.optional(),
    _experimental: elementSchema.optional(),
    date: dateTimeSchema.optional(),
    _date: elementSchema.optional(),
    publisher: stringSchema.optional(),
    _publisher: elementSchema.optional(),
    contact: contactDetailSchema.array().optional(),
    description: stringSchema.optional(),
    _description: elementSchema.optional(),
    useContext: usageContextSchema.array().optional(),
    jurisdiction: codeableConceptSchema.array().optional(),
    purpose: stringSchema.optional(),
    _purpose: elementSchema.optional(),
    copyright: stringSchema.optional(),
    _copyright: elementSchema.optional(),
    keyword: codingSchema.array().optional(),
    fhirVersion: stringSchema.optional(),
    _fhirVersion: elementSchema.optional(),
    mapping: backboneElementSchema
      .extend({
        identity: stringSchema,
        _identity: elementSchema.optional(),
        uri: urlSchema.optional(),
        _uri: elementSchema.optional(),
        name: stringSchema.optional(),
        _name: elementSchema.optional(),
        comment: stringSchema.optional(),
        _comment: elementSchema.optional(),
      })
      .array()
      .optional(),
    kind: structureDefinitionKindSchema,
    _kind: elementSchema.optional(),
    abstract: booleanSchema,
    _abstract: elementSchema.optional(),
    context: backboneElementSchema
      .extend({
        type: extensionContextTypeSchema,
        _type: elementSchema.optional(),
        expression: stringSchema,
        _expression: elementSchema.optional(),
      })
      .array()
      .optional(),
    contextInvariant: stringSchema.array().optional(),
    _contextInvariant: elementSchema.array().optional(),
    type: urlSchema,
    _type: elementSchema.optional(),
    baseDefinition: urlSchema.optional(),
    _baseDefinition: elementSchema.optional(),
    derivation: structureDefinitionDerivationSchema.optional(),
    _derivation: elementSchema.optional(),
    snapshot: backboneElementSchema
      .extend({
        element: z
          .lazy(() =>
            backboneElementSchema.extend({
              id: stringSchema.optional(),
              path: stringSchema,
              _path: elementSchema.optional(),
              representation: propertyRepresentationSchema.array().optional(),
              _representation: elementSchema.array().optional(),
              sliceName: stringSchema.optional(),
              _sliceName: elementSchema.optional(),
              sliceIsConstraining: booleanSchema.optional(),
              _sliceIsConstraining: elementSchema.optional(),
              label: stringSchema.optional(),
              _label: elementSchema.optional(),
              code: codingSchema.array().optional(),
              slicing: backboneElementSchema
                .extend({
                  discriminator: backboneElementSchema
                    .extend({
                      type: discriminatorTypeSchema,
                      _type: elementSchema.optional(),
                      path: stringSchema,
                      _path: elementSchema.optional(),
                    })
                    .array()
                    .optional(),
                  description: stringSchema.optional(),
                  _description: elementSchema.optional(),
                  ordered: booleanSchema.optional(),
                  _ordered: elementSchema.optional(),
                  rules: slicingRulesSchema,
                  _rules: elementSchema.optional(),
                })
                .optional(),
              short: stringSchema.optional(),
              _short: elementSchema.optional(),
              definition: stringSchema.optional(),
              _definition: elementSchema.optional(),
              comment: stringSchema.optional(),
              _comment: elementSchema.optional(),
              requirements: stringSchema.optional(),
              _requirements: elementSchema.optional(),
              alias: stringSchema.array().optional(),
              _alias: elementSchema.array().optional(),
              min: unsignedIntSchema.optional(),
              max: stringSchema.optional(),
              _max: elementSchema.optional(),
              base: backboneElementSchema
                .extend({
                  path: stringSchema,
                  _path: elementSchema.optional(),
                  min: unsignedIntSchema,
                  max: stringSchema,
                  _max: elementSchema.optional(),
                })
                .optional(),
              contentReference: uriSchema.optional(),
              _contentReference: elementSchema.optional(),
              type: backboneElementSchema
                .extend({
                  code: uriSchema,
                  _code: elementSchema.optional(),
                  profile: urlSchema.array().optional(),
                  _profile: elementSchema.array().optional(),
                  targetProfile: urlSchema.array().optional(),
                  _targetProfile: elementSchema.array().optional(),
                  aggregation: aggregationModeSchema.array().optional(),
                  _aggregation: elementSchema.array().optional(),
                  versioning: z
                    .enum(['either', 'independent', 'specific'])
                    .optional(),
                  _versioning: elementSchema.optional(),
                })
                .array()
                .optional(),
              defaultValueBase64Binary: stringSchema.optional(),
              _defaultValueBase64Binary: elementSchema.optional(),
              defaultValueBoolean: booleanSchema.optional(),
              _defaultValueBoolean: elementSchema.optional(),
              defaultValueCanonical: urlSchema.optional(),
              _defaultValueCanonical: elementSchema.optional(),
              defaultValueCode: stringSchema.optional(),
              _defaultValueCode: elementSchema.optional(),
              defaultValueDate: stringSchema.optional(),
              _defaultValueDate: elementSchema.optional(),
              defaultValueDateTime: stringSchema.optional(),
              _defaultValueDateTime: elementSchema.optional(),
              defaultValueDecimal: decimalSchema.optional(),
              _defaultValueDecimal: elementSchema.optional(),
              defaultValueId: stringSchema.optional(),
              _defaultValueId: elementSchema.optional(),
              defaultValueInstant: stringSchema.optional(),
              _defaultValueInstant: elementSchema.optional(),
              defaultValueInteger: intSchema.optional(),
              _defaultValueInteger: elementSchema.optional(),
              defaultValueMarkdown: stringSchema.optional(),
              _defaultValueMarkdown: elementSchema.optional(),
              defaultValueOid: stringSchema.optional(),
              _defaultValueOid: elementSchema.optional(),
              defaultValuePositiveInt: intSchema.optional(),
              _defaultValuePositiveInt: elementSchema.optional(),
              defaultValueString: stringSchema.optional(),
              _defaultValueString: elementSchema.optional(),
              defaultValueTime: stringSchema.optional(),
              _defaultValueTime: elementSchema.optional(),
              defaultValueUnsignedInt: unsignedIntSchema.optional(),
              _defaultValueUnsignedInt: elementSchema.optional(),
              defaultValueUri: uriSchema.optional(),
              _defaultValueUri: elementSchema.optional(),
              defaultValueUrl: urlSchema.optional(),
              _defaultValueUrl: elementSchema.optional(),
              defaultValueUuid: stringSchema.optional(),
              _defaultValueUuid: elementSchema.optional(),
              defaultValueAddress: z.lazy(() => addressSchema).optional(),
              defaultValueAge: z.lazy(() => quantitySchema).optional(),
              defaultValueAnnotation: z.lazy(() => annotationSchema).optional(),
              defaultValueAttachment: z.lazy(() => attachmentSchema).optional(),
              defaultValueCodeableConcept: codeableConceptSchema.optional(),
              defaultValueCoding: codingSchema.optional(),
              defaultValueContactPoint: z
                .lazy(() => contactPointSchema)
                .optional(),
              defaultValueCount: z.lazy(() => quantitySchema).optional(),
              defaultValueDistance: z.lazy(() => quantitySchema).optional(),
              defaultValueDuration: z.lazy(() => quantitySchema).optional(),
              defaultValueHumanName: z.lazy(() => humanNameSchema).optional(),
              defaultValueIdentifier: identifierSchema.optional(),
              defaultValueMoney: z.lazy(() => moneySchema).optional(),
              defaultValuePeriod: z.lazy(() => periodSchema).optional(),
              defaultValueQuantity: z.lazy(() => quantitySchema).optional(),
              defaultValueRange: z.lazy(() => rangeSchema).optional(),
              defaultValueRatio: z.lazy(() => ratioSchema).optional(),
              defaultValueReference: referenceSchema.optional(),
              defaultValueSampledData: z
                .lazy(() => sampledDataSchema)
                .optional(),
              defaultValueSignature: z.lazy(() => signatureSchema).optional(),
              defaultValueTiming: z.lazy(() => timingSchema).optional(),
              defaultValueContactDetail: z
                .lazy(() => contactDetailSchema)
                .optional(),
              defaultValueContributor: z
                .lazy(() => contributorSchema)
                .optional(),
              defaultValueDataRequirement: z
                .lazy(() => dataRequirementSchema)
                .optional(),
              defaultValueExpression: z.lazy(() => expressionSchema).optional(),
              defaultValueParameterDefinition: z
                .lazy(() => parameterDefinitionSchema)
                .optional(),
              defaultValueRelatedArtifact: z
                .lazy(() => relatedArtifactSchema)
                .optional(),
              defaultValueTriggerDefinition: z
                .lazy(() => triggerDefinitionSchema)
                .optional(),
              defaultValueUsageContext: z
                .lazy(() => usageContextSchema)
                .optional(),
              defaultValueDosage: z.lazy(() => dosageSchema).optional(),
              meaningWhenMissing: stringSchema.optional(),
              _meaningWhenMissing: elementSchema.optional(),
              orderMeaning: stringSchema.optional(),
              _orderMeaning: elementSchema.optional(),
              fixedBase64Binary: stringSchema.optional(),
              _fixedBase64Binary: elementSchema.optional(),
              fixedBoolean: booleanSchema.optional(),
              _fixedBoolean: elementSchema.optional(),
              fixedCanonical: urlSchema.optional(),
              _fixedCanonical: elementSchema.optional(),
              fixedCode: stringSchema.optional(),
              _fixedCode: elementSchema.optional(),
              fixedDate: stringSchema.optional(),
              _fixedDate: elementSchema.optional(),
              fixedDateTime: stringSchema.optional(),
              _fixedDateTime: elementSchema.optional(),
              fixedDecimal: decimalSchema.optional(),
              _fixedDecimal: elementSchema.optional(),
              fixedId: stringSchema.optional(),
              _fixedId: elementSchema.optional(),
              fixedInstant: stringSchema.optional(),
              _fixedInstant: elementSchema.optional(),
              fixedInteger: intSchema.optional(),
              _fixedInteger: elementSchema.optional(),
              fixedMarkdown: stringSchema.optional(),
              _fixedMarkdown: elementSchema.optional(),
              fixedOid: stringSchema.optional(),
              _fixedOid: elementSchema.optional(),
              fixedPositiveInt: intSchema.optional(),
              _fixedPositiveInt: elementSchema.optional(),
              fixedString: stringSchema.optional(),
              _fixedString: elementSchema.optional(),
              fixedTime: stringSchema.optional(),
              _fixedTime: elementSchema.optional(),
              fixedUnsignedInt: unsignedIntSchema.optional(),
              _fixedUnsignedInt: elementSchema.optional(),
              fixedUri: uriSchema.optional(),
              _fixedUri: elementSchema.optional(),
              fixedUrl: urlSchema.optional(),
              _fixedUrl: elementSchema.optional(),
              fixedUuid: stringSchema.optional(),
              _fixedUuid: elementSchema.optional(),
              patternBase64Binary: stringSchema.optional(),
              _patternBase64Binary: elementSchema.optional(),
              patternBoolean: booleanSchema.optional(),
              _patternBoolean: elementSchema.optional(),
              patternCanonical: urlSchema.optional(),
              _patternCanonical: elementSchema.optional(),
              patternCode: stringSchema.optional(),
              _patternCode: elementSchema.optional(),
              patternDate: stringSchema.optional(),
              _patternDate: elementSchema.optional(),
              patternDateTime: stringSchema.optional(),
              _patternDateTime: elementSchema.optional(),
              patternDecimal: decimalSchema.optional(),
              _patternDecimal: elementSchema.optional(),
              patternId: stringSchema.optional(),
              _patternId: elementSchema.optional(),
              patternInstant: stringSchema.optional(),
              _patternInstant: elementSchema.optional(),
              patternInteger: intSchema.optional(),
              _patternInteger: elementSchema.optional(),
              patternMarkdown: stringSchema.optional(),
              _patternMarkdown: elementSchema.optional(),
              patternOid: stringSchema.optional(),
              _patternOid: elementSchema.optional(),
              patternPositiveInt: intSchema.optional(),
              _patternPositiveInt: elementSchema.optional(),
              patternString: stringSchema.optional(),
              _patternString: elementSchema.optional(),
              patternTime: stringSchema.optional(),
              _patternTime: elementSchema.optional(),
              patternUnsignedInt: unsignedIntSchema.optional(),
              _patternUnsignedInt: elementSchema.optional(),
              patternUri: uriSchema.optional(),
              _patternUri: elementSchema.optional(),
              patternUrl: urlSchema.optional(),
              _patternUrl: elementSchema.optional(),
              patternUuid: stringSchema.optional(),
              _patternUuid: elementSchema.optional(),
              example: backboneElementSchema
                .extend({
                  label: stringSchema,
                  _label: elementSchema.optional(),
                  valueBase64Binary: stringSchema.optional(),
                  _valueBase64Binary: elementSchema.optional(),
                  valueBoolean: booleanSchema.optional(),
                  _valueBoolean: elementSchema.optional(),
                  valueCanonical: urlSchema.optional(),
                  _valueCanonical: elementSchema.optional(),
                  valueCode: stringSchema.optional(),
                  _valueCode: elementSchema.optional(),
                  valueDate: stringSchema.optional(),
                  _valueDate: elementSchema.optional(),
                  valueDateTime: stringSchema.optional(),
                  _valueDateTime: elementSchema.optional(),
                  valueDecimal: decimalSchema.optional(),
                  _valueDecimal: elementSchema.optional(),
                  valueId: stringSchema.optional(),
                  _valueId: elementSchema.optional(),
                  valueInstant: stringSchema.optional(),
                  _valueInstant: elementSchema.optional(),
                  valueInteger: intSchema.optional(),
                  _valueInteger: elementSchema.optional(),
                  valueMarkdown: stringSchema.optional(),
                  _valueMarkdown: elementSchema.optional(),
                  valueOid: stringSchema.optional(),
                  _valueOid: elementSchema.optional(),
                  valuePositiveInt: intSchema.optional(),
                  _valuePositiveInt: elementSchema.optional(),
                  valueString: stringSchema.optional(),
                  _valueString: elementSchema.optional(),
                  valueTime: stringSchema.optional(),
                  _valueTime: elementSchema.optional(),
                  valueUnsignedInt: unsignedIntSchema.optional(),
                  _valueUnsignedInt: elementSchema.optional(),
                  valueUri: uriSchema.optional(),
                  _valueUri: elementSchema.optional(),
                  valueUrl: urlSchema.optional(),
                  _valueUrl: elementSchema.optional(),
                  valueUuid: stringSchema.optional(),
                  _valueUuid: elementSchema.optional(),
                })
                .array()
                .optional(),
              minValueDate: stringSchema.optional(),
              _minValueDate: elementSchema.optional(),
              minValueDateTime: stringSchema.optional(),
              _minValueDateTime: elementSchema.optional(),
              minValueInstant: stringSchema.optional(),
              _minValueInstant: elementSchema.optional(),
              minValueTime: stringSchema.optional(),
              _minValueTime: elementSchema.optional(),
              minValueDecimal: decimalSchema.optional(),
              _minValueDecimal: elementSchema.optional(),
              minValueInteger: intSchema.optional(),
              _minValueInteger: elementSchema.optional(),
              minValuePositiveInt: intSchema.optional(),
              _minValuePositiveInt: elementSchema.optional(),
              minValueUnsignedInt: unsignedIntSchema.optional(),
              _minValueUnsignedInt: elementSchema.optional(),
              minValueQuantity: z.lazy(() => quantitySchema).optional(),
              maxValueDate: stringSchema.optional(),
              _maxValueDate: elementSchema.optional(),
              maxValueDateTime: stringSchema.optional(),
              _maxValueDateTime: elementSchema.optional(),
              maxValueInstant: stringSchema.optional(),
              _maxValueInstant: elementSchema.optional(),
              maxValueTime: stringSchema.optional(),
              _maxValueTime: elementSchema.optional(),
              maxValueDecimal: decimalSchema.optional(),
              _maxValueDecimal: elementSchema.optional(),
              maxValueInteger: intSchema.optional(),
              _maxValueInteger: elementSchema.optional(),
              maxValuePositiveInt: intSchema.optional(),
              _maxValuePositiveInt: elementSchema.optional(),
              maxValueUnsignedInt: unsignedIntSchema.optional(),
              _maxValueUnsignedInt: elementSchema.optional(),
              maxValueQuantity: z.lazy(() => quantitySchema).optional(),
              maxLength: intSchema.optional(),
              _maxLength: elementSchema.optional(),
              condition: stringSchema.array().optional(),
              _condition: elementSchema.array().optional(),
              constraint: backboneElementSchema
                .extend({
                  key: stringSchema,
                  _key: elementSchema.optional(),
                  requirements: stringSchema.optional(),
                  _requirements: elementSchema.optional(),
                  severity: constraintSeveritySchema,
                  _severity: elementSchema.optional(),
                  human: stringSchema,
                  _human: elementSchema.optional(),
                  expression: stringSchema.optional(),
                  _expression: elementSchema.optional(),
                  xpath: stringSchema.optional(),
                  _xpath: elementSchema.optional(),
                  source: urlSchema.optional(),
                  _source: elementSchema.optional(),
                })
                .array()
                .optional(),
              mustSupport: booleanSchema.optional(),
              _mustSupport: elementSchema.optional(),
              isModifier: booleanSchema.optional(),
              _isModifier: elementSchema.optional(),
              isModifierReason: stringSchema.optional(),
              _isModifierReason: elementSchema.optional(),
              isSummary: booleanSchema.optional(),
              _isSummary: elementSchema.optional(),
              binding: backboneElementSchema
                .extend({
                  strength: bindingStrengthSchema,
                  _strength: elementSchema.optional(),
                  description: stringSchema.optional(),
                  _description: elementSchema.optional(),
                  valueSet: urlSchema.optional(),
                  _valueSet: elementSchema.optional(),
                })
                .optional(),
              mapping: backboneElementSchema
                .extend({
                  identity: stringSchema,
                  _identity: elementSchema.optional(),
                  language: stringSchema.optional(),
                  _language: elementSchema.optional(),
                  map: stringSchema,
                  _map: elementSchema.optional(),
                  comment: stringSchema.optional(),
                  _comment: elementSchema.optional(),
                })
                .array()
                .optional(),
            }),
          )
          .array(),
      })
      .optional(),
    differential: backboneElementSchema
      .extend({
        element: z
          .lazy(() =>
            backboneElementSchema.extend({
              id: stringSchema.optional(),
              path: stringSchema,
              _path: elementSchema.optional(),
              representation: propertyRepresentationSchema.array().optional(),
              _representation: elementSchema.array().optional(),
              sliceName: stringSchema.optional(),
              _sliceName: elementSchema.optional(),
              sliceIsConstraining: booleanSchema.optional(),
              _sliceIsConstraining: elementSchema.optional(),
              label: stringSchema.optional(),
              _label: elementSchema.optional(),
              code: codingSchema.array().optional(),
              slicing: backboneElementSchema
                .extend({
                  discriminator: backboneElementSchema
                    .extend({
                      type: discriminatorTypeSchema,
                      _type: elementSchema.optional(),
                      path: stringSchema,
                      _path: elementSchema.optional(),
                    })
                    .array()
                    .optional(),
                  description: stringSchema.optional(),
                  _description: elementSchema.optional(),
                  ordered: booleanSchema.optional(),
                  _ordered: elementSchema.optional(),
                  rules: slicingRulesSchema,
                  _rules: elementSchema.optional(),
                })
                .optional(),
              short: stringSchema.optional(),
              _short: elementSchema.optional(),
              definition: stringSchema.optional(),
              _definition: elementSchema.optional(),
              comment: stringSchema.optional(),
              _comment: elementSchema.optional(),
              requirements: stringSchema.optional(),
              _requirements: elementSchema.optional(),
              alias: stringSchema.array().optional(),
              _alias: elementSchema.array().optional(),
              min: unsignedIntSchema.optional(),
              max: stringSchema.optional(),
              _max: elementSchema.optional(),
              base: backboneElementSchema
                .extend({
                  path: stringSchema,
                  _path: elementSchema.optional(),
                  min: unsignedIntSchema,
                  max: stringSchema,
                  _max: elementSchema.optional(),
                })
                .optional(),
              contentReference: uriSchema.optional(),
              _contentReference: elementSchema.optional(),
              type: backboneElementSchema
                .extend({
                  code: uriSchema,
                  _code: elementSchema.optional(),
                  profile: urlSchema.array().optional(),
                  _profile: elementSchema.array().optional(),
                  targetProfile: urlSchema.array().optional(),
                  _targetProfile: elementSchema.array().optional(),
                  aggregation: aggregationModeSchema.array().optional(),
                  _aggregation: elementSchema.array().optional(),
                  versioning: z
                    .enum(['either', 'independent', 'specific'])
                    .optional(),
                  _versioning: elementSchema.optional(),
                })
                .array()
                .optional(),
              defaultValueBase64Binary: stringSchema.optional(),
              _defaultValueBase64Binary: elementSchema.optional(),
              defaultValueBoolean: booleanSchema.optional(),
              _defaultValueBoolean: elementSchema.optional(),
              defaultValueCanonical: urlSchema.optional(),
              _defaultValueCanonical: elementSchema.optional(),
              defaultValueCode: stringSchema.optional(),
              _defaultValueCode: elementSchema.optional(),
              defaultValueDate: stringSchema.optional(),
              _defaultValueDate: elementSchema.optional(),
              defaultValueDateTime: stringSchema.optional(),
              _defaultValueDateTime: elementSchema.optional(),
              defaultValueDecimal: decimalSchema.optional(),
              _defaultValueDecimal: elementSchema.optional(),
              defaultValueId: stringSchema.optional(),
              _defaultValueId: elementSchema.optional(),
              defaultValueInstant: stringSchema.optional(),
              _defaultValueInstant: elementSchema.optional(),
              defaultValueInteger: intSchema.optional(),
              _defaultValueInteger: elementSchema.optional(),
              defaultValueMarkdown: stringSchema.optional(),
              _defaultValueMarkdown: elementSchema.optional(),
              defaultValueOid: stringSchema.optional(),
              _defaultValueOid: elementSchema.optional(),
              defaultValuePositiveInt: intSchema.optional(),
              _defaultValuePositiveInt: elementSchema.optional(),
              defaultValueString: stringSchema.optional(),
              _defaultValueString: elementSchema.optional(),
              defaultValueTime: stringSchema.optional(),
              _defaultValueTime: elementSchema.optional(),
              defaultValueUnsignedInt: unsignedIntSchema.optional(),
              _defaultValueUnsignedInt: elementSchema.optional(),
              defaultValueUri: uriSchema.optional(),
              _defaultValueUri: elementSchema.optional(),
              defaultValueUrl: urlSchema.optional(),
              _defaultValueUrl: elementSchema.optional(),
              defaultValueUuid: stringSchema.optional(),
              _defaultValueUuid: elementSchema.optional(),
              defaultValueAddress: z.lazy(() => addressSchema).optional(),
              defaultValueAge: z.lazy(() => quantitySchema).optional(),
              defaultValueAnnotation: z.lazy(() => annotationSchema).optional(),
              defaultValueAttachment: z.lazy(() => attachmentSchema).optional(),
              defaultValueCodeableConcept: codeableConceptSchema.optional(),
              defaultValueCoding: codingSchema.optional(),
              defaultValueContactPoint: z
                .lazy(() => contactPointSchema)
                .optional(),
              defaultValueCount: z.lazy(() => quantitySchema).optional(),
              defaultValueDistance: z.lazy(() => quantitySchema).optional(),
              defaultValueDuration: z.lazy(() => quantitySchema).optional(),
              defaultValueHumanName: z.lazy(() => humanNameSchema).optional(),
              defaultValueIdentifier: identifierSchema.optional(),
              defaultValueMoney: z.lazy(() => moneySchema).optional(),
              defaultValuePeriod: z.lazy(() => periodSchema).optional(),
              defaultValueQuantity: z.lazy(() => quantitySchema).optional(),
              defaultValueRange: z.lazy(() => rangeSchema).optional(),
              defaultValueRatio: z.lazy(() => ratioSchema).optional(),
              defaultValueReference: referenceSchema.optional(),
              defaultValueSampledData: z
                .lazy(() => sampledDataSchema)
                .optional(),
              defaultValueSignature: z.lazy(() => signatureSchema).optional(),
              defaultValueTiming: z.lazy(() => timingSchema).optional(),
              defaultValueContactDetail: z
                .lazy(() => contactDetailSchema)
                .optional(),
              defaultValueContributor: z
                .lazy(() => contributorSchema)
                .optional(),
              defaultValueDataRequirement: z
                .lazy(() => dataRequirementSchema)
                .optional(),
              defaultValueExpression: z.lazy(() => expressionSchema).optional(),
              defaultValueParameterDefinition: z
                .lazy(() => parameterDefinitionSchema)
                .optional(),
              defaultValueRelatedArtifact: z
                .lazy(() => relatedArtifactSchema)
                .optional(),
              defaultValueTriggerDefinition: z
                .lazy(() => triggerDefinitionSchema)
                .optional(),
              defaultValueUsageContext: z
                .lazy(() => usageContextSchema)
                .optional(),
              defaultValueDosage: z.lazy(() => dosageSchema).optional(),
              meaningWhenMissing: stringSchema.optional(),
              _meaningWhenMissing: elementSchema.optional(),
              orderMeaning: stringSchema.optional(),
              _orderMeaning: elementSchema.optional(),
              fixedBase64Binary: stringSchema.optional(),
              _fixedBase64Binary: elementSchema.optional(),
              fixedBoolean: booleanSchema.optional(),
              _fixedBoolean: elementSchema.optional(),
              fixedCanonical: urlSchema.optional(),
              _fixedCanonical: elementSchema.optional(),
              fixedCode: stringSchema.optional(),
              _fixedCode: elementSchema.optional(),
              fixedDate: stringSchema.optional(),
              _fixedDate: elementSchema.optional(),
              fixedDateTime: stringSchema.optional(),
              _fixedDateTime: elementSchema.optional(),
              fixedDecimal: decimalSchema.optional(),
              _fixedDecimal: elementSchema.optional(),
              fixedId: stringSchema.optional(),
              _fixedId: elementSchema.optional(),
              fixedInstant: stringSchema.optional(),
              _fixedInstant: elementSchema.optional(),
              fixedInteger: intSchema.optional(),
              _fixedInteger: elementSchema.optional(),
              fixedMarkdown: stringSchema.optional(),
              _fixedMarkdown: elementSchema.optional(),
              fixedOid: stringSchema.optional(),
              _fixedOid: elementSchema.optional(),
              fixedPositiveInt: intSchema.optional(),
              _fixedPositiveInt: elementSchema.optional(),
              fixedString: stringSchema.optional(),
              _fixedString: elementSchema.optional(),
              fixedTime: stringSchema.optional(),
              _fixedTime: elementSchema.optional(),
              fixedUnsignedInt: unsignedIntSchema.optional(),
              _fixedUnsignedInt: elementSchema.optional(),
              fixedUri: uriSchema.optional(),
              _fixedUri: elementSchema.optional(),
              fixedUrl: urlSchema.optional(),
              _fixedUrl: elementSchema.optional(),
              fixedUuid: stringSchema.optional(),
              _fixedUuid: elementSchema.optional(),
              patternBase64Binary: stringSchema.optional(),
              _patternBase64Binary: elementSchema.optional(),
              patternBoolean: booleanSchema.optional(),
              _patternBoolean: elementSchema.optional(),
              patternCanonical: urlSchema.optional(),
              _patternCanonical: elementSchema.optional(),
              patternCode: stringSchema.optional(),
              _patternCode: elementSchema.optional(),
              patternDate: stringSchema.optional(),
              _patternDate: elementSchema.optional(),
              patternDateTime: stringSchema.optional(),
              _patternDateTime: elementSchema.optional(),
              patternDecimal: decimalSchema.optional(),
              _patternDecimal: elementSchema.optional(),
              patternId: stringSchema.optional(),
              _patternId: elementSchema.optional(),
              patternInstant: stringSchema.optional(),
              _patternInstant: elementSchema.optional(),
              patternInteger: intSchema.optional(),
              _patternInteger: elementSchema.optional(),
              patternMarkdown: stringSchema.optional(),
              _patternMarkdown: elementSchema.optional(),
              patternOid: stringSchema.optional(),
              _patternOid: elementSchema.optional(),
              patternPositiveInt: intSchema.optional(),
              _patternPositiveInt: elementSchema.optional(),
              patternString: stringSchema.optional(),
              _patternString: elementSchema.optional(),
              patternTime: stringSchema.optional(),
              _patternTime: elementSchema.optional(),
              patternUnsignedInt: unsignedIntSchema.optional(),
              _patternUnsignedInt: elementSchema.optional(),
              patternUri: uriSchema.optional(),
              _patternUri: elementSchema.optional(),
              patternUrl: urlSchema.optional(),
              _patternUrl: elementSchema.optional(),
              patternUuid: stringSchema.optional(),
              _patternUuid: elementSchema.optional(),
              example: backboneElementSchema
                .extend({
                  label: stringSchema,
                  _label: elementSchema.optional(),
                  valueBase64Binary: stringSchema.optional(),
                  _valueBase64Binary: elementSchema.optional(),
                  valueBoolean: booleanSchema.optional(),
                  _valueBoolean: elementSchema.optional(),
                  valueCanonical: urlSchema.optional(),
                  _valueCanonical: elementSchema.optional(),
                  valueCode: stringSchema.optional(),
                  _valueCode: elementSchema.optional(),
                  valueDate: stringSchema.optional(),
                  _valueDate: elementSchema.optional(),
                  valueDateTime: stringSchema.optional(),
                  _valueDateTime: elementSchema.optional(),
                  valueDecimal: decimalSchema.optional(),
                  _valueDecimal: elementSchema.optional(),
                  valueId: stringSchema.optional(),
                  _valueId: elementSchema.optional(),
                  valueInstant: stringSchema.optional(),
                  _valueInstant: elementSchema.optional(),
                  valueInteger: intSchema.optional(),
                  _valueInteger: elementSchema.optional(),
                  valueMarkdown: stringSchema.optional(),
                  _valueMarkdown: elementSchema.optional(),
                  valueOid: stringSchema.optional(),
                  _valueOid: elementSchema.optional(),
                  valuePositiveInt: intSchema.optional(),
                  _valuePositiveInt: elementSchema.optional(),
                  valueString: stringSchema.optional(),
                  _valueString: elementSchema.optional(),
                  valueTime: stringSchema.optional(),
                  _valueTime: elementSchema.optional(),
                  valueUnsignedInt: unsignedIntSchema.optional(),
                  _valueUnsignedInt: elementSchema.optional(),
                  valueUri: uriSchema.optional(),
                  _valueUri: elementSchema.optional(),
                  valueUrl: urlSchema.optional(),
                  _valueUrl: elementSchema.optional(),
                  valueUuid: stringSchema.optional(),
                  _valueUuid: elementSchema.optional(),
                })
                .array()
                .optional(),
              minValueDate: stringSchema.optional(),
              _minValueDate: elementSchema.optional(),
              minValueDateTime: stringSchema.optional(),
              _minValueDateTime: elementSchema.optional(),
              minValueInstant: stringSchema.optional(),
              _minValueInstant: elementSchema.optional(),
              minValueTime: stringSchema.optional(),
              _minValueTime: elementSchema.optional(),
              minValueDecimal: decimalSchema.optional(),
              _minValueDecimal: elementSchema.optional(),
              minValueInteger: intSchema.optional(),
              _minValueInteger: elementSchema.optional(),
              minValuePositiveInt: intSchema.optional(),
              _minValuePositiveInt: elementSchema.optional(),
              minValueUnsignedInt: unsignedIntSchema.optional(),
              _minValueUnsignedInt: elementSchema.optional(),
              minValueQuantity: z.lazy(() => quantitySchema).optional(),
              maxValueDate: stringSchema.optional(),
              _maxValueDate: elementSchema.optional(),
              maxValueDateTime: stringSchema.optional(),
              _maxValueDateTime: elementSchema.optional(),
              maxValueInstant: stringSchema.optional(),
              _maxValueInstant: elementSchema.optional(),
              maxValueTime: stringSchema.optional(),
              _maxValueTime: elementSchema.optional(),
              maxValueDecimal: decimalSchema.optional(),
              _maxValueDecimal: elementSchema.optional(),
              maxValueInteger: intSchema.optional(),
              _maxValueInteger: elementSchema.optional(),
              maxValuePositiveInt: intSchema.optional(),
              _maxValuePositiveInt: elementSchema.optional(),
              maxValueUnsignedInt: unsignedIntSchema.optional(),
              _maxValueUnsignedInt: elementSchema.optional(),
              maxValueQuantity: z.lazy(() => quantitySchema).optional(),
              maxLength: intSchema.optional(),
              _maxLength: elementSchema.optional(),
              condition: stringSchema.array().optional(),
              _condition: elementSchema.array().optional(),
              constraint: backboneElementSchema
                .extend({
                  key: stringSchema,
                  _key: elementSchema.optional(),
                  requirements: stringSchema.optional(),
                  _requirements: elementSchema.optional(),
                  severity: constraintSeveritySchema,
                  _severity: elementSchema.optional(),
                  human: stringSchema,
                  _human: elementSchema.optional(),
                  expression: stringSchema.optional(),
                  _expression: elementSchema.optional(),
                  xpath: stringSchema.optional(),
                  _xpath: elementSchema.optional(),
                  source: urlSchema.optional(),
                  _source: elementSchema.optional(),
                })
                .array()
                .optional(),
              mustSupport: booleanSchema.optional(),
              _mustSupport: elementSchema.optional(),
              isModifier: booleanSchema.optional(),
              _isModifier: elementSchema.optional(),
              isModifierReason: stringSchema.optional(),
              _isModifierReason: elementSchema.optional(),
              isSummary: booleanSchema.optional(),
              _isSummary: elementSchema.optional(),
              binding: backboneElementSchema
                .extend({
                  strength: bindingStrengthSchema,
                  _strength: elementSchema.optional(),
                  description: stringSchema.optional(),
                  _description: elementSchema.optional(),
                  valueSet: urlSchema.optional(),
                  _valueSet: elementSchema.optional(),
                })
                .optional(),
              mapping: backboneElementSchema
                .extend({
                  identity: stringSchema,
                  _identity: elementSchema.optional(),
                  language: stringSchema.optional(),
                  _language: elementSchema.optional(),
                  map: stringSchema,
                  _map: elementSchema.optional(),
                  comment: stringSchema.optional(),
                  _comment: elementSchema.optional(),
                })
                .array()
                .optional(),
            }),
          )
          .array(),
      })
      .optional(),
  }),
)

export const structureDefinitionSchema: ZodType<StructureDefinition> =
  untypedStructureDefinitionSchema

export class FhirStructureDefinition extends FhirDomainResource<StructureDefinition> {
  public static parse(value: unknown): FhirStructureDefinition {
    return new FhirStructureDefinition(structureDefinitionSchema.parse(value))
  }
}
